mean_shape, sd_shape) {
value_to_count <- potential_value
freq_table <- freq(potential_raster)
count <- freq_table[freq_table$value == value_to_count, "count"]
n_fields <- count / mean_size
print(n_fields)
# Identify potential cells
potential_cells <- which(values(potential_raster) == potential_value)
field_raster <- rast(potential_raster)
values(field_raster) <- NA
resolution <- res(field_raster)
field_list <- list()
field_id <- 1
# Track used cells
used_cells <- rep(FALSE, ncell(field_raster))
#try each field 10 times
# Step 1: Generate candidate field templates
field_templates <- vector("list", n_fields)
for (i in seq_len(n_fields)) {
area <- max(4, round(abs(rnorm(1, mean_size, sd_size))))
shape <- abs(rnorm(1, mean_shape, sd_shape))
width <- max(1, round(sqrt(area * shape)))
height <- max(1, round(area / width))
field_templates[[i]] <- list(area = width * height, width = width, height = height)
}
# Sort largest fields first
ordered_indices <- order(sapply(field_templates, function(x) x$area), decreasing = TRUE)
field_templates <- field_templates[ordered_indices]
placed_templates <- rep(FALSE, length(field_templates))
# Get coordinates for all potential cells in row-major order
candidate_rc <- rowColFromCell(field_raster, potential_cells)
for (k in seq_along(potential_cells)) {
row <- candidate_rc[k, 1]
col <- candidate_rc[k, 2]
for (i in which(!placed_templates)) {
template <- field_templates[[i]]
dims <- list(
list(height = template$height, width = template$width),
list(height = template$width, width = template$height)  # Try both orientations
)
for (dim in dims) {
rows <- row:(row + dim$height - 1)
cols <- col:(col + dim$width - 1)
if (max(rows) > nrow(field_raster) || max(cols) > ncol(field_raster)) next
# Get all cell indices in the proposed rectangle
cell_indices <- as.vector(outer(rows, cols, function(r, c) cellFromRowCol(field_raster, r, c)))
if (all(cell_indices %in% potential_cells) && all(!used_cells[cell_indices])) {
# Place field
used_cells[cell_indices] <- TRUE
values(field_raster)[cell_indices] <- field_id
coords <- terra::xyFromCell(field_raster, cell_indices)
ymin <- terra::ymin(field_raster)
ymax <- terra::ymax(field_raster)
coords[,2] <- ymax - (coords[,2] - ymin)
loc <- list( x = coords[,2], y = coords[,1])
new_field <- new("Field",
number = field_id,
location = loc,
farmer = NA_real_,
crop = NA_real_)
field_list[[field_id]] <- new_field
field_id <- field_id + 1
placed_templates[i] <- TRUE
break
}
}
if (placed_templates[i]) break  # Move to next potential cell
}
if (all(placed_templates)) break  # All templates placed
}
return(list(
map = field_raster,
field_list = field_list
))
}
# Create a raster with some potential space
test<-generate_pn(50,50,1,2,3,0.01,TRUE, "land_percentage", percetange = 75)
terra::plot(test)
# Run the simulation
result <- generate_fields(
potential_raster = test,
potential_value = 1,
mean_size = 100,
sd_size = 100,
mean_shape = 3,
sd_shape = 2)
result$map
# Visualize
plot(result$map, main = "Generated Fields (by ID)")
print(result$field_list[[1]])  # Example field object
terra::plot(test)
terra::plot(result$map, add = TRUE)
return_by_field(result, method = 1)
library(terra)
# Define the Field class
setClass("Field", slots = list(
number = "numeric",
location = "list",
farmer = "numeric",
crop = "numeric"
))
# Generate fields with packing-style local search
generate_fields <- function(potential_raster, potential_value,
mean_size, sd_size,
mean_shape, sd_shape) {
value_to_count <- potential_value
freq_table <- freq(potential_raster)
count <- freq_table[freq_table$value == value_to_count, "count"]
n_fields <- count / mean_size
print(n_fields)
# Identify potential cells
potential_cells <- which(values(potential_raster) == potential_value)
field_raster <- rast(potential_raster)
values(field_raster) <- NA
resolution <- res(field_raster)
field_list <- list()
field_id <- 1
# Track used cells
used_cells <- rep(FALSE, ncell(field_raster))
#try each field 10 times
# Step 1: Generate candidate field templates
field_templates <- vector("list", n_fields)
for (i in seq_len(n_fields)) {
area <- max(4, round(abs(rnorm(1, mean_size, sd_size))))
shape <- abs(rnorm(1, mean_shape, sd_shape))
width <- max(1, round(sqrt(area * shape)))
height <- max(1, round(area / width))
field_templates[[i]] <- list(area = width * height, width = width, height = height)
}
# Sort largest fields first
ordered_indices <- order(sapply(field_templates, function(x) x$area), decreasing = TRUE)
field_templates <- field_templates[ordered_indices]
placed_templates <- rep(FALSE, length(field_templates))
# Get coordinates for all potential cells in row-major order
candidate_rc <- rowColFromCell(field_raster, potential_cells)
for (k in seq_along(potential_cells)) {
row <- candidate_rc[k, 1]
col <- candidate_rc[k, 2]
for (i in which(!placed_templates)) {
template <- field_templates[[i]]
dims <- list(
list(height = template$height, width = template$width),
list(height = template$width, width = template$height)  # Try both orientations
)
for (dim in dims) {
rows <- row:(row + dim$height - 1)
cols <- col:(col + dim$width - 1)
if (max(rows) > nrow(field_raster) || max(cols) > ncol(field_raster)) next
# Get all cell indices in the proposed rectangle
cell_indices <- as.vector(outer(rows, cols, function(r, c) cellFromRowCol(field_raster, r, c)))
if (all(cell_indices %in% potential_cells) && all(!used_cells[cell_indices])) {
# Place field
used_cells[cell_indices] <- TRUE
values(field_raster)[cell_indices] <- field_id
coords <- terra::xyFromCell(field_raster, cell_indices)
ymin <- terra::ymin(field_raster)
ymax <- terra::ymax(field_raster)
coords[,2] <- ymax - (coords[,2] - ymin)
loc <- list( x = coords[,2], y = coords[,1])
new_field <- new("Field",
number = field_id,
location = loc,
farmer = NA_real_,
crop = NA_real_)
field_list[[field_id]] <- new_field
field_id <- field_id + 1
placed_templates[i] <- TRUE
break
}
}
if (placed_templates[i]) break  # Move to next potential cell
}
if (all(placed_templates)) break  # All templates placed
}
return(list(
map = field_raster,
field_list = field_list
))
}
# Create a raster with some potential space
test<-generate_pn(50,50,1,2,3,0.01,TRUE, "land_percentage", percetange = 75)
terra::plot(test)
# Run the simulation
result <- generate_fields(
potential_raster = test,
potential_value = 1,
mean_size = 100,
sd_size = 100,
mean_shape = 3,
sd_shape = 2)
result$map
# Visualize
plot(result$map, main = "Generated Fields (by ID)")
print(result$field_list[[1]])  # Example field object
terra::plot(test)
terra::plot(result$map, add = TRUE)
return_by_field(result, method = 1)
library(terra)
# Define the Field class
setClass("Field", slots = list(
number = "numeric",
location = "list",
farmer = "numeric",
crop = "numeric"
))
# Generate fields with packing-style local search
generate_fields <- function(potential_raster, potential_value,
mean_size, sd_size,
mean_shape, sd_shape) {
value_to_count <- potential_value
freq_table <- freq(potential_raster)
count <- freq_table[freq_table$value == value_to_count, "count"]
n_fields <- count / mean_size
print(n_fields)
# Identify potential cells
potential_cells <- which(values(potential_raster) == potential_value)
field_raster <- rast(potential_raster)
values(field_raster) <- NA
resolution <- res(field_raster)
field_list <- list()
field_id <- 1
# Track used cells
used_cells <- rep(FALSE, ncell(field_raster))
#try each field 10 times
# Step 1: Generate candidate field templates
field_templates <- vector("list", n_fields)
for (i in seq_len(n_fields)) {
area <- max(4, round(abs(rnorm(1, mean_size, sd_size))))
shape <- abs(rnorm(1, mean_shape, sd_shape))
width <- max(1, round(sqrt(area * shape)))
height <- max(1, round(area / width))
field_templates[[i]] <- list(area = width * height, width = width, height = height)
}
# Sort largest fields first
ordered_indices <- order(sapply(field_templates, function(x) x$area), decreasing = TRUE)
field_templates <- field_templates[ordered_indices]
placed_templates <- rep(FALSE, length(field_templates))
# Get coordinates for all potential cells in row-major order
candidate_rc <- rowColFromCell(field_raster, potential_cells)
for (k in seq_along(potential_cells)) {
row <- candidate_rc[k, 1]
col <- candidate_rc[k, 2]
for (i in which(!placed_templates)) {
template <- field_templates[[i]]
dims <- list(
list(height = template$height, width = template$width),
list(height = template$width, width = template$height)  # Try both orientations
)
for (dim in dims) {
rows <- row:(row + dim$height - 1)
cols <- col:(col + dim$width - 1)
if (max(rows) > nrow(field_raster) || max(cols) > ncol(field_raster)) next
# Get all cell indices in the proposed rectangle
cell_indices <- as.vector(outer(rows, cols, function(r, c) cellFromRowCol(field_raster, r, c)))
if (all(cell_indices %in% potential_cells) && all(!used_cells[cell_indices])) {
# Place field
used_cells[cell_indices] <- TRUE
values(field_raster)[cell_indices] <- field_id
coords <- terra::xyFromCell(field_raster, cell_indices)
ymin <- terra::ymin(field_raster)
ymax <- terra::ymax(field_raster)
coords[,2] <- ymax - (coords[,2] - ymin)
loc <- list( x = coords[,2], y = coords[,1])
new_field <- new("Field",
number = field_id,
location = loc,
farmer = NA_real_,
crop = NA_real_)
field_list[[field_id]] <- new_field
field_id <- field_id + 1
placed_templates[i] <- TRUE
break
}
}
if (placed_templates[i]) break  # Move to next potential cell
}
if (all(placed_templates)) break  # All templates placed
}
return(list(
map = field_raster,
field_list = field_list
))
}
# Create a raster with some potential space
test<-generate_pn(50,50,1,2,3,0.01,TRUE, "land_percentage", percetange = 75)
terra::plot(test)
# Run the simulation
result <- generate_fields(
potential_raster = test,
potential_value = 1,
mean_size = 100,
sd_size = 100,
mean_shape = 3,
sd_shape = 2)
return_by_field(result, method = 1)
library(terra)
# Define the Field class
setClass("Field", slots = list(
number = "numeric",
location = "list",
farmer = "numeric",
crop = "numeric"
))
# Generate fields with packing-style local search
generate_fields <- function(potential_raster, potential_value,
mean_size, sd_size,
mean_shape, sd_shape) {
value_to_count <- potential_value
freq_table <- freq(potential_raster)
count <- freq_table[freq_table$value == value_to_count, "count"]
n_fields <- count / mean_size
print(n_fields)
# Identify potential cells
potential_cells <- which(values(potential_raster) == potential_value)
field_raster <- rast(potential_raster)
values(field_raster) <- NA
resolution <- res(field_raster)
field_list <- list()
field_id <- 1
# Track used cells
used_cells <- rep(FALSE, ncell(field_raster))
#try each field 10 times
# Step 1: Generate candidate field templates
field_templates <- vector("list", n_fields)
for (i in seq_len(n_fields)) {
area <- max(4, round(abs(rnorm(1, mean_size, sd_size))))
shape <- abs(rnorm(1, mean_shape, sd_shape))
width <- max(1, round(sqrt(area * shape)))
height <- max(1, round(area / width))
field_templates[[i]] <- list(area = width * height, width = width, height = height)
}
# Sort largest fields first
ordered_indices <- order(sapply(field_templates, function(x) x$area), decreasing = TRUE)
field_templates <- field_templates[ordered_indices]
placed_templates <- rep(FALSE, length(field_templates))
# Get coordinates for all potential cells in row-major order
candidate_rc <- rowColFromCell(field_raster, potential_cells)
for (k in seq_along(potential_cells)) {
row <- candidate_rc[k, 1]
col <- candidate_rc[k, 2]
for (i in which(!placed_templates)) {
template <- field_templates[[i]]
dims <- list(
list(height = template$height, width = template$width),
list(height = template$width, width = template$height)  # Try both orientations
)
for (dim in dims) {
rows <- row:(row + dim$height - 1)
cols <- col:(col + dim$width - 1)
if (max(rows) > nrow(field_raster) || max(cols) > ncol(field_raster)) next
# Get all cell indices in the proposed rectangle
cell_indices <- as.vector(outer(rows, cols, function(r, c) cellFromRowCol(field_raster, r, c)))
if (all(cell_indices %in% potential_cells) && all(!used_cells[cell_indices])) {
# Place field
used_cells[cell_indices] <- TRUE
values(field_raster)[cell_indices] <- field_id
coords <- terra::xyFromCell(field_raster, cell_indices)
ymin <- terra::ymin(field_raster)
ymax <- terra::ymax(field_raster)
coords[,2] <- ymax - (coords[,2] - ymin)
loc <- list( x = coords[,2], y = coords[,1])
new_field <- new("Field",
number = field_id,
location = loc,
farmer = NA_real_,
crop = NA_real_)
field_list[[field_id]] <- new_field
field_id <- field_id + 1
placed_templates[i] <- TRUE
break
}
}
if (placed_templates[i]) break  # Move to next potential cell
}
if (all(placed_templates)) break  # All templates placed
}
return(list(
map = field_raster,
field_list = field_list
))
}
# Create a raster with some potential space
test<-generate_pn(50,50,1,2,3,0.01,TRUE, "land_percentage", percetange = 75)
terra::plot(test)
# Run the simulation
result <- generate_fields(
potential_raster = test,
potential_value = 1,
mean_size = 50,
sd_size = 50,
mean_shape = 3,
sd_shape = 2)
return_by_field(result, method = 1)
library(ALGR)
devtools::document()
devtools::document()
library(ALGR)
library(ALGR)
devtools::document()
library(ALGR)
devtools::document()
library(ALGR)
r<-generate_pn(500,500,1,1,3,0.005,TRUE, "land_percentage", percetange = 70)
result <- establish_tes(
potential_space = r,
includsion_value = 1,
mean_field_size = 50,
sd_field_size = 50,
mean_shape_index = 2,
sd_shape_index = 2)
r<-generate_pn(200,200,1,1,3,0.005,TRUE, "land_percentage", percetange = 70)
terra::plot(r)
result <- establish_tes(
potential_space = r,
includsion_value = 1,
mean_field_size = 50,
sd_field_size = 50,
mean_shape_index = 2,
sd_shape_index = 2)
r<-generate_pn(200,200,1,1,3,0.005,TRUE, "land_percentage", percetange = 70)
terra::plot(r)
result <- establish_tes(
potential_space = r,
includsion_value = 1,
mean_field_size = 100,
sd_field_size = 100,
mean_shape_index = 2,
sd_shape_index = 2)
r<-generate_pn(100,100,1,1,3,0.005,TRUE, "land_percentage", percetange = 70)
terra::plot(r)
result <- establish_tes(
potential_space = r,
includsion_value = 1,
mean_field_size = 100,
sd_field_size = 100,
mean_shape_index = 2,
sd_shape_index = 2)
return_by_field(result, method = 1)
r<-generate_pn(100,100,1,1,3,0.005,TRUE, "land_percentage", percetange = 70)
terra::plot(r)
result <- establish_tes(
potential_space = r,
includsion_value = 1,
mean_field_size = 50,
sd_field_size = 50,
mean_shape_index = 1,
sd_shape_index = 2)
return_by_field(result, method = 1)
devtools::build_readme()
devtools::build_readme()
devtools::document()
require(landscape.finder)
require(ggplot2)
require(terra)
# number of cores available
nc = 4
# reference land cover map
reference = rast(system.file("extdata", "env_data.tif", package="landscape.finder"))
# compile data into a candidate landscape object
candidate_landscapes = register_candidates(reference, k=5)
# show...
candidate_landscapes@candidates # candidate landscapes
candidate_landscapes@statistics # environmental profiles of each candidate
candidate_landscapes@similarity # cosine similarity of each candidate relative to its cluster
# select optimal landscapes (and maximize gradients; default)
selected_landscapes = landscape_finder(candidate_landscapes, maximize=T,
area=10000, distance=10000)
# see tested landscapes that fit criteria
area_flag = selected_landscapes@area_flag
distance_flag = selected_landscapes@distance_flag
# plot original polygons
poly = candidate_landscapes@candidates
plot(poly, "cluster_id")
# add selected polygons
plot(poly[area_flag & distance_flag,], col="red", add=T)
# close plot
dev.off()
# compile data into a candidate landscape object
candidate_landscapes = register_candidates(reference, k=5)
# show...
candidate_landscapes@candidates # candidate landscapes
candidate_landscapes@statistics # environmental profiles of each candidate
candidate_landscapes@similarity # cosine similarity of each candidate relative to its cluster
# select optimal landscapes (and maximize gradients; default)
selected_landscapes = landscape_finder(candidate_landscapes, maximize=T,
area=10000, distance=10000)
# see tested landscapes that fit criteria
area_flag = selected_landscapes@area_flag
distance_flag = selected_landscapes@distance_flag
# plot original polygons
poly = candidate_landscapes@candidates
plot(poly, "cluster_id")
# add selected polygons
plot(poly[area_flag & distance_flag,], col="red", add=T)
# select optimal landscapes (but minimize gradients)
selected_landscapes = landscape_finder(candidate_landscapes, minimize=T,
area=10000, distance=10000)
# select optimal landscapes (but minimize gradients)
selected_landscapes = landscape_finder(candidate_landscapes, minemize=T,
area=10000, distance=10000)
# select optimal landscapes (but minimize gradients)
selected_landscapes = landscape_finder(candidate_landscapes, maximize =T,
area=10000, distance=10000)
# plot original polygons
plot(candidate_landscapes@candidates, "cluster_id")
# add selected polygons
plot(candidate_landscapes@candidates[area_flag & distance_flag,], col="red", add=T)
plot(reference)
plot(candidate_landscapes)
library(ALGR)
detach("package:ALGR", unload = TRUE)
library(ALGR)
